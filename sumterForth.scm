(define forth
  (let ((stack '()) (input #f) (word '()))
    (define (def-word!)
      (let ((ctx (read)))
        (cond
          ((eq? ctx 'end) '())
          (#t (cons ctx (def-word!))))))
    (define (feval input)
      (cond
        ((number? input) (set! stack (cons input stack)))
        ((eq? input ':) (set! word (cons (def-word!) word)))
        ((eq? input 'drop) (car stack) (set! stack (cdr stack)))
        ((eq? input 'dup) (set! stack (cons (car stack) stack)))
        ((eq? input '-) (set! stack (cons (- (cadr stack)
                                             (car stack))
                                          (cddr stack)))) 
        ((eq? input '+) (set! stack (cons (+ (car stack)
                                             (cadr stack))
                                          (cddr stack))))
        ((eq? input '.s) (write stack) (newline))))
    (lambda ()
      (let ((input (read)))
        (feval input)
        (cond ((eq? input 'exit)
               (set! stack '())
               (write "Elveda Mahzun Pazartesi!")
               (newline))
              ((eq? input 'pause)
               (write "Paused") (newline))
              (#t (forth)))))))
