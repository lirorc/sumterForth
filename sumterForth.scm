(define forth
  (let ((stack '()) (words '()) (stat #t))
    ;;Ugly code, clean someday
    (define (def-word!)
      (let ((ctx (read)))
        (cond
          ((eq? ctx 'df) '())
          (#t (cons ctx (def-word!))))))
    (define (word? input words)
      (cond ((eq? words '()) #f)
            ((eq? (caar words) input) #t)
            (#t (word? input (cdr words)))))
    (define (find-word word words)
      (cond ((eq? (caar words) word) (cdar words))
            (#t (find-word word (cdr words)))))
    (define (call-word input)
      (let ((stuff (find-word input words)))
        (eval-stuff stuff)))
    (define (eval-stuff stuff)
      (feval (car stuff))
      (if (pair? (cdr stuff)) (eval-stuff (cdr stuff))))

    (define (feval input)
      (if (not (eq? stat #f))
        (cond
          ((number? input) (set! stack (cons input stack)))
          ((eq? input 'else) (set! stat #f))
          ((eq? input ':) (set! words (cons (def-word!) words)))
          ((eq? input 'drop) (if (pair? stack)
                               (begin
                                 (car stack)
                                 (set! stack (cdr stack)))
                               (begin
                                 (display "STACK EMPTY!")
                                 (newline))))
          ((eq? input 'dup) (set! stack (cons (car stack) stack)))
          ((eq? input 'swap) (set! stack (cons (cadr stack)
                                               (cons (car stack)
                                                     (cddr stack)))))
          ((eq? input 'rot) (set! stack `(,(caddr stack) .
                                          (,(car stack) .
                                          (,(cadr stack) .
                                          ,(cdddr stack))))))
          ((eq? input '>) (if (> (cadr stack) (car stack))
                            (set! stack (cons -1 (cddr stack)))
                            (set! stack (cons 0 (cddr stack)))))
          ((eq? input '<) (if (< (cadr stack) (car stack))
                            (set! stack (cons -1 (cddr stack)))
                            (set! stack (cons 0 (cddr stack)))))
          ((eq? input '>=) (if (>= (cadr stack) (car stack))
                             (set! stack (cons -1 (cddr stack)))
                             (set! stack (cons 0 (cddr stack)))))
          ((eq? input '<=) (if (<= (cadr stack) (car stack))
                             (set! stack (cons -1 (cddr stack)))
                             (set! stack (cons 0 (cddr stack)))))
          ((eq? input '=) (if (= (cadr stack) (car stack))
                            (set! stack (cons -1 (cddr stack)))
                            (set! stack (cons 0 (cddr stack)))))
          ((eq? input '-) (set! stack (cons (- (cadr stack)
                                               (car stack))
                                            (cddr stack)))) 
          ((eq? input '+) (set! stack (cons (+ (car stack)
                                               (cadr stack))
                                            (cddr stack))))
          ((string? input) (begin (display input) (newline)))
          ((eq? input '.s) (display stack) (newline))
          ((eq? input '.) (if (pair? stack)
                            (begin
                              (display (car stack))
                              (newline)))
                          (feval 'drop))
          ((eq? input 'if) (let ((cmp (car stack)))
                             (set! stack (cdr stack))
                             (if (eq? cmp 0)
                               (set! stat #f))))
          ((eq? input 'then))
          ((word? input words) (call-word input))
          ((eq? input 'exit)) ;;Please clean me!
          ((eq? input 'pause))
          (#t (begin (display "ERROR, UNDEFINED") (newline))))
        (if (or (eq? input 'else)
                (eq? input 'then))
          (set! stat #t ))))

    (lambda ()
      (let ((input (read)))
        (feval input)
        (cond ((eq? input 'exit)
               (set! stack '())
               (set! words '())
               (display "Elveda Mahzun Pazartesi!")
               (newline))
              ((eq? input 'pause)
               (display "Paused") (newline))
              (#t (forth)))))))
